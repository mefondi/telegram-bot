from aiogram import Router, F
from aiogram.types import Message, callback_query, ReplyKeyboardRemove
from aiogram.filters import Command, or_f, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.filters.chat_types import ChatTypeFilter, is_admin
import app.keyboards as kb

admin_router = Router()
admin_router.message.filter(ChatTypeFilter(['private']), is_admin())

@admin_router.message(Command('admin'))
async def admin(message: Message):
    await message.answer('–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',reply_markup=kb.admin)
        
@admin_router.message(F.text == '—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ‚ùå')
async def admin(message: Message):
    await message.answer('–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    
@admin_router.message(F.text == '–∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä ‚ôªÔ∏è')
async def admin(message: Message):
    await message.answer('–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    
@admin_router.message(F.text == '—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ üìÅ')
async def admin(message: Message):
    await message.answer('–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    
class addproduct(StatesGroup):
    name = State()
    categories = State()
    description = State()
    price = State()
    image = State()
 
@admin_router.message(StateFilter(None), F.text == '–¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ‚úîÔ∏è')
async def admin(message: Message, state: FSMContext):
    await message.answer('–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=ReplyKeyboardRemove())
    await state.set_state(addproduct.name)

@admin_router.message(StateFilter('*'), Command('–æ—Ç–º–µ–Ω–∞'))    
@admin_router.message(StateFilter('*'), F.text.casefold() == '–æ—Ç–º–µ–Ω–∞')
async def admin(message: Message, state: FSMContext) -> None:
    curren = await state.get_state()
    if curren is None:
        return
    await state.clear()
    await message.answer('–¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω—ã', reply_markup=kb.admin)
    
@admin_router.message(StateFilter('*'), Command('–Ω–∞–∑–∞–¥'))    
@admin_router.message(StateFilter('*'), F.text.casefold() == '–Ω–∞–∑–∞–¥')
async def admin(message: Message, state: FSMContext) -> None:
    curren = await state.get_state()
    if curren == addproduct.name:
        await message.answer('–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç')
        return
    previous = None
    for step in addproduct.__all_states__:
        if step.state == curren:
            await state.set_state(previous)
            await message.answer(f"–≤–≤–µ–¥–∏—Ç–µ {previous.state[11:]} –∑–∞–Ω–æ–≤–æ")
            return
        previous = step
    
@admin_router.message(addproduct.name, F.text)
async def admin(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=await kb.categories_for_admin())
    await state.set_state(addproduct.categories)
      
@admin_router.message(addproduct.name)
async def admin(message: Message, state: FSMContext):
    await message.answer('–≤–≤–µ–¥–∏–Ω—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
    
@admin_router.callback_query(addproduct.categories, F.data)
async def admin(callback: callback_query, state: FSMContext):
    await state.update_data(categories=callback.data)
    await callback.answer('–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏–Ω—è—Ç–∞')
    await callback.message.answer('–≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(addproduct.description)

@admin_router.message(addproduct.categories)
async def admin(message: Message, state: FSMContext):
    await message.answer('–≤–≤–µ–¥–∏–Ω—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
    
@admin_router.message(addproduct.description, F.text)
async def admin(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer('–≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(addproduct.price)

@admin_router.message(addproduct.description)
async def admin(message: Message, state: FSMContext):
    await message.answer('–≤–≤–µ–¥–∏–Ω—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')

@admin_router.message(addproduct.price, F.text)
async def admin(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer('–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(addproduct.image)

@admin_router.message(addproduct.price)
async def admin(message: Message, state: FSMContext):
    await message.answer('–≤–≤–µ–¥–∏–Ω—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
    
@admin_router.message(addproduct.image, F.photo)
async def admin(message: Message, state: FSMContext):
    await state.update_data(image=message.photo[-1].file_id)
    await message.answer('—Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=kb.admin)
    data = await state.get_data()
    await message.answer(str(data))
    await state.clear()

@admin_router.message(addproduct.image)
async def admin(message: Message, state: FSMContext):
    await message.answer('–≤–≤–µ–¥–∏–Ω—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')